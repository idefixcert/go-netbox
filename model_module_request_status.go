/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 4.2.2 (4.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// ModuleRequestStatus * `offline` - Offline * `active` - Active * `planned` - Planned * `staged` - Staged * `failed` - Failed * `decommissioning` - Decommissioning
type ModuleRequestStatus string

// List of ModuleRequest_status
const (
	MODULEREQUESTSTATUS_OFFLINE         ModuleRequestStatus = "offline"
	MODULEREQUESTSTATUS_ACTIVE          ModuleRequestStatus = "active"
	MODULEREQUESTSTATUS_PLANNED         ModuleRequestStatus = "planned"
	MODULEREQUESTSTATUS_STAGED          ModuleRequestStatus = "staged"
	MODULEREQUESTSTATUS_FAILED          ModuleRequestStatus = "failed"
	MODULEREQUESTSTATUS_DECOMMISSIONING ModuleRequestStatus = "decommissioning"
)

// All allowed values of ModuleRequestStatus enum
var AllowedModuleRequestStatusEnumValues = []ModuleRequestStatus{
	"offline",
	"active",
	"planned",
	"staged",
	"failed",
	"decommissioning",
}

func (v *ModuleRequestStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleRequestStatus(value)
	for _, existing := range AllowedModuleRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleRequestStatus", value)
}

// NewModuleRequestStatusFromValue returns a pointer to a valid ModuleRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleRequestStatusFromValue(v string) (*ModuleRequestStatus, error) {
	ev := ModuleRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleRequestStatus: valid values are %v", v, AllowedModuleRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleRequestStatus) IsValid() bool {
	for _, existing := range AllowedModuleRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModuleRequest_status value
func (v ModuleRequestStatus) Ptr() *ModuleRequestStatus {
	return &v
}

type NullableModuleRequestStatus struct {
	value *ModuleRequestStatus
	isSet bool
}

func (v NullableModuleRequestStatus) Get() *ModuleRequestStatus {
	return v.value
}

func (v *NullableModuleRequestStatus) Set(val *ModuleRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleRequestStatus(val *ModuleRequestStatus) *NullableModuleRequestStatus {
	return &NullableModuleRequestStatus{value: val, isSet: true}
}

func (v NullableModuleRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
